# -*- coding: utf-8 -*-
"""CATpjt2-Fraud_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzZJJJbkX3MkF8xnFGLxJX1RVOFD8J7E

GOD **BM**gc*dp*

# 0. Import libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

from google.colab import drive
drive.mount('/content/drive')

"""# 1. Defining functions

## Loading and preparing transactions
"""

def load_and_prepare_transactions():
    """
    Load and prepare transaction data for analysis
    """
    try:
        # Read the transactions CSV file
        transaction_path='/content/drive/MyDrive/SP3-Caterpillar/Transactions.csv' # transaction information such as amount, date and type
        df = pd.read_csv(transaction_path)

        # Convert date to datetime
        df['date'] = pd.to_datetime(df['date'], format='%y%m%d')
        print("Date conversion completed")

        # Sort by date
        df = df.sort_values('date')
        print("Data sorted by date")

        return df

    except FileNotFoundError:
        print("Error: Could not find the Transactions.csv file. Please check the file path.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

"""## Analysing transaction patterns"""

def analyze_transaction_patterns(df):
    """
    Analyze various patterns in transaction data
    """
    # Basic statistics of transaction amounts
    amount_stats = df['amount'].describe()
    print("\nTransaction Amount Statistics:")
    print(amount_stats)

    # Transaction type distribution
    type_dist = df['type'].value_counts()
    print("\nTransaction Type Distribution:")
    print(type_dist)

    # Operation distribution
    op_dist = df['operation'].value_counts()
    print("\nOperation Distribution:")
    print(op_dist)

    # Transaction symbols distribution
    symbol_dist = df['k_symbol'].value_counts()
    print("\nTransaction Symbol Distribution:")
    print(symbol_dist)

    return amount_stats, type_dist, op_dist, symbol_dist

"""## Creating visualizations"""

def plot_transaction_patterns(df):
    """
    Create visualizations of transaction patterns
    """
    # Set up the plotting style using a valid Seaborn style
    plt.style.use('seaborn-v0_8-whitegrid')

    # Create a figure with multiple subplots
    fig = plt.figure(figsize=(15, 10))

    # 1. Transaction amounts distribution
    plt.subplot(2, 2, 1)
    sns.histplot(data=df, x='amount', bins=50)
    plt.title('Distribution of Transaction Amounts')
    plt.xlabel('Amount')
    plt.ylabel('Count')

    # 2. Daily transaction volume
    plt.subplot(2, 2, 2)
    daily_volumes = df.groupby('date').size()
    plt.plot(daily_volumes.index, daily_volumes.values)
    plt.title('Daily Transaction Volume')
    plt.xlabel('Date')
    plt.ylabel('Number of Transactions')
    plt.xticks(rotation=45)

    # 3. Transaction types
    plt.subplot(2, 2, 3)
    df['type'].value_counts().plot(kind='bar')
    plt.title('Transaction Types Distribution')
    plt.xlabel('Type')
    plt.ylabel('Count')

    # 4. Balance vs Amount scatter plot
    plt.subplot(2, 2, 4)
    plt.scatter(df['amount'], df['balance'], alpha=0.5)
    plt.title('Balance vs Transaction Amount')
    plt.xlabel('Transaction Amount')
    plt.ylabel('Balance')

    plt.tight_layout()
    plt.show()

"""## Analysing temporal patterns"""

def analyze_temporal_patterns(df):
    """
    Analyze patterns over time
    """
    # Add time-based features
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month
    df['day_of_week'] = df['date'].dt.dayofweek
    df['hour'] = df['date'].dt.hour

    # Monthly transaction volume
    monthly_volume = df.groupby(['year', 'month']).size()
    print("\nMonthly Transaction Volume:")
    print(monthly_volume)

    # Day of week patterns
    dow_pattern = df.groupby('day_of_week').agg({
        'amount': ['count', 'mean', 'std']
    })
    print("\nDay of Week Patterns:")
    print(dow_pattern)

    return monthly_volume, dow_pattern

"""## Main function"""

def main():
    # Load and prepare data
    df = load_and_prepare_transactions()
    print("Data loaded successfully. Shape:", df.shape)

    # Basic analysis
    amount_stats, type_dist, op_dist, symbol_dist = analyze_transaction_patterns(df)

    # Temporal analysis
    monthly_volume, dow_pattern = analyze_temporal_patterns(df)

    # Create visualizations
    plot_transaction_patterns(df)

if __name__ == "__main__":
    main()